<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://computo-journal.org/feed.xml" rel="self" type="application/atom+xml"/><link href="https://computo-journal.org/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-01T14:23:14+00:00</updated><id>https://computo-journal.org/feed.xml</id><title type="html">COMPUTO</title><subtitle>A Journal of the French Statistical Society to promote reproducible Science </subtitle><entry><title type="html">How to automatically publish the HTML of my contribution to a website?</title><link href="https://computo-journal.org/blog/2025/revised-github-process/" rel="alternate" type="text/html" title="How to automatically publish the HTML of my contribution to a website?"/><published>2025-03-20T15:30:00+00:00</published><updated>2025-03-20T15:30:00+00:00</updated><id>https://computo-journal.org/blog/2025/revised-github-process</id><content type="html" xml:base="https://computo-journal.org/blog/2025/revised-github-process/"><![CDATA[<h1 id="tldr">TL;DR</h1> <p>After cloning the right template for you (R, Python, or both), verify the <code class="language-plaintext highlighter-rouge">.github/workflows/build.yml</code>, it should contain exactly what is on the <a href="https://github.com/computorg/workflows/blob/main/.github/workflows/build.yml">Computo Workflow repository’s <code class="language-plaintext highlighter-rouge">build.yml</code></a> :</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Main Workflows</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">main"</span><span class="pi">,</span><span class="s2">"</span><span class="s">master"</span><span class="pi">]</span>
  <span class="na">repository_dispatch</span><span class="pi">:</span>
    <span class="na">types</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">custom-event</span><span class="pi">]</span> 
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">main"</span><span class="pi">,</span><span class="s2">"</span><span class="s">master"</span><span class="pi">]</span>


<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">call_env_workflow</span><span class="pi">:</span>
    <span class="na">uses</span><span class="pi">:</span> <span class="s">computorg/workflows/.github/workflows/global-env.yml@main</span>
  <span class="na">call_quartopublish_workflow</span><span class="pi">:</span>
    <span class="na">permissions</span><span class="pi">:</span>
      <span class="na">id-token</span><span class="pi">:</span> <span class="s">write</span>
      <span class="na">contents</span><span class="pi">:</span> <span class="s">write</span>
      <span class="na">pages</span><span class="pi">:</span> <span class="s">write</span>
    <span class="na">uses</span><span class="pi">:</span> <span class="s">computorg/workflows/.github/workflows/publish-render.yml@main</span>
    <span class="na">needs</span><span class="pi">:</span> <span class="s">call_env_workflow</span>
</code></pre></div></div> <p>Second, in your <code class="language-plaintext highlighter-rouge">Settings &gt; Pages</code> on your repository, select the <strong>GitHub Actions</strong> as the source of your website.</p> <p><img src="/assets/images/2025-03-20-revised-github-process/depoy-github.png" alt="Deploy your website with GitHub Actions" width="100%"/></p> <p>Then, you can customize the <code class="language-plaintext highlighter-rouge">setup-env-ci.sh</code> and <code class="language-plaintext highlighter-rouge">setup-render-ci.sh</code> scripts to fit your needs.</p> <ul> <li><code class="language-plaintext highlighter-rouge">setup-env-ci.sh</code> is for setting up the environment and typically adding system dependencies. The virtual machine on github (runner) may need to install some packages with <code class="language-plaintext highlighter-rouge">apt-get</code> for R or Python packages.</li> <li><code class="language-plaintext highlighter-rouge">setup-render-ci.sh</code> is for taking care of specific dependencies outside of quarto, related to rendering, like plotting software or running a script to generate data.</li> </ul> <blockquote> <p><strong>Note</strong></p> <p>You can safely delete the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch if you have one, as we don’t need anymore to push the HTML files to the site.</p> </blockquote> <h1 id="computo-workflow-structure">Computo Workflow Structure</h1> <p>The Computo workflows provide a streamlined publishing pipeline for authors to submit and render Quarto articles directly on GitHub Pages without requiring technical expertise.</p> <h2 id="workflow-summary">Workflow Summary</h2> <p><img src="/assets/images/2025-03-20-revised-github-process/workflow.svg" alt="Computo Workflow Structure" width="100%"/></p> <p>The publication process consists of two main phases:</p> <ol> <li><strong>Environment Setup and Caching</strong> (<code class="language-plaintext highlighter-rouge">global-env.yml</code>) <ul> <li>Detects and installs required dependencies (Python, R)</li> <li>Caches the environment for faster subsequent runs</li> <li>Customizable via <code class="language-plaintext highlighter-rouge">setup-env-ci.sh</code></li> </ul> </li> <li><strong>Rendering and Deployment</strong> (<code class="language-plaintext highlighter-rouge">publish-render.yml</code>) <ul> <li>Renders Quarto documents to HTML</li> <li>Publish the output to GitHub Pages</li> <li>Customizable via <code class="language-plaintext highlighter-rouge">setup-render-ci.sh</code></li> </ul> </li> </ol> <p>Authors only need to reference the main workflow file (<code class="language-plaintext highlighter-rouge">build.yml</code>) in their repository, which orchestrates these processes.</p> <h2 id="workflow-visualization">Workflow Visualization</h2> <h2 id="key-benefits">Key Benefits</h2> <ul> <li><strong>Simplified Process</strong>: Authors need minimal GitHub Actions knowledge</li> <li><strong>Optimized Performance</strong>: Environment caching for faster builds</li> <li><strong>Customization Points</strong>: Two script entry points for custom configurations</li> <li><strong>Automated Deployment</strong>: Direct publishing to GitHub Pages</li> </ul> <p>Authors simply use the build.yml workflow in their repository to trigger the complete process from environment setup to final publication.</p>]]></content><author><name></name></author><category term="reproducibility"/><summary type="html"><![CDATA[Describe how to render your article, activate your gh-page and publish your contribution online]]></summary></entry><entry><title type="html">What is expected exactly in terms of reproducibility?</title><link href="https://computo-journal.org/blog/2023/what-reproducibility/" rel="alternate" type="text/html" title="What is expected exactly in terms of reproducibility?"/><published>2023-07-04T00:00:00+00:00</published><updated>2023-07-04T00:00:00+00:00</updated><id>https://computo-journal.org/blog/2023/what-reproducibility</id><content type="html" xml:base="https://computo-journal.org/blog/2023/what-reproducibility/"><![CDATA[<p>Computo is not just about publishing a notebook and proving that it can be compiled with CI! This part of the process is what we call <em>“Editorial Reproducibility”</em>. <em>“Scientific”</em> or <em>“numerical”</em> reproducibility of the analyses is also mandatory, on top of classical peer-review evaluation.</p> <p>We don’t ask people reproducing their data… yet! We also don’t ask for “bit-wise computational” reproducibility (i.e. obtaining exactly the same results bit-by-bit) but rather a “statistical” reproducibility, i.e. obtaining results leading to the same conclusion, with potential non-significant statistical variability.</p> <p><img src="img/reproducible-sequence.svg" alt="Reproducible Workflow"/></p> <p>Indeed, the global scientific workflow of a reproducible process for a Computo may be split in two types of steps:</p> <dl> <dt>External</dt> <dd>This part of the process may be conducted outside of the notebook environment, for a list of reasons (non-exclusive to each other):</dd> </dl> <ul> <li>the process is too long to be conducted in a notebook</li> <li>the data to be processed is too big to be handled directly in the notebook</li> <li>it needs a specific environment (e.g. a cluster, with gpus, etc.)</li> <li>it needs to involve specific languages (e.g. C, C++, Fortran, etc.) or build tools (e.g. make, cmake, etc.)</li> </ul> <p>It is “Computational reproducibility”, where the reproducibility is achieved by providing the code and the environment to run it, but not the results themselves.</p> <dl> <dt>Editorial</dt> <dd>This is where the notebook presents the results of the external process, and where everything is put together to produce the final document, it is “Direct reproducibility” in the sense that the notebook is the only thing needed to reproduce the results.</dd> </dl> <p>Ultimately, the workflow must end with a direct reproducibility step which concludes the whole process.</p> <p>When applicable, the switch from external to editorial reproducibility is done with a “data transfer” step, where the data produced by the external process is transferred to the notebook environment. It’s required that not only the intermediate results are provided, but also the code to transfer it in the notebook environment. They are a variety of software solutions to do so.</p> <h2 id="examples-of-data-transfer-solutions">Examples of data transfer solutions</h2> <h3 id="intermediate-results-storage">Intermediate results storage</h3> <ul> <li>in python environment: the <a href="https://joblib.readthedocs.io/en/latest/memory.html"><code class="language-plaintext highlighter-rouge">joblib.Memory</code></a> class which provides a caching mechanism for python functions, and can be used to save the results of a function call to disk, and load it back later.</li> <li>in R environment: the <code class="language-plaintext highlighter-rouge">.RData</code> file format, which can be loaded back in R with the <code class="language-plaintext highlighter-rouge">load()</code> function.</li> </ul> <h3 id="transfer-of-the-results-to-the-notebook-environment">Transfer of the results to the notebook environment</h3> <ul> <li>for both aforementioned solutions, the results (<code class="language-plaintext highlighter-rouge">.joblib</code> directory or <code class="language-plaintext highlighter-rouge">.Rdata</code> file) could be committed to the git repository, and directly loaded in the notebook environment.</li> <li>Another solution is to centralize input data (when large enough) and intermediate results on a shared scientific provider (we recommend <a href="https://zenodo.org/">Zenodo</a> for this purpose), and download them in the notebook environment.</li> </ul>]]></content><author><name></name></author><category term="reproducibility"/><summary type="html"><![CDATA[Discuss the different kinds of reproducibility at play in Computo, and what is expected from the authors.]]></summary></entry><entry><title type="html">I have large or sensible data. How should I proceed?</title><link href="https://computo-journal.org/blog/2023/data/" rel="alternate" type="text/html" title="I have large or sensible data. How should I proceed?"/><published>2023-06-21T00:00:00+00:00</published><updated>2023-06-21T00:00:00+00:00</updated><id>https://computo-journal.org/blog/2023/data</id><content type="html" xml:base="https://computo-journal.org/blog/2023/data/"><![CDATA[<h2 id="large-data-sets">Large data sets</h2> <p>If your submission materials contain files larger than 50MB, <strong>especially data files</strong>, they won’t fit on a git repository as is. For this reason, we encourage you to put your data or any materials you deem necessary on an external “open data” centered repository hub such a <a href="https://zenodo.org/">Zenodo</a> or <a href="https://osf.io/">OSF</a>.</p> <p>You could also use any long-term (emphasis on long-term) data repository that is standard in your scientific community (or for a specific type of data/scientific application), and for which it is straight-forward to retrieve the data using a script code/notebook code (we highly encourage to use open platforms, ideally institutionally hosted).</p> <h2 id="sensible-data-sets">Sensible data sets</h2> <p>Since the reproducibility of numerical results is a necessary condition for publication in <em>Computo</em>, your submissions must include all necessary data (e.g. via Zenodo repositories). However, if you have sensible data (for example, biomedical data that needs to be anonymized), you are invited to contact the editorial committee to explain and justify your position. In any case, we will ask you to make public at least a sample of the original data, and a demonstration of its use in your article for Computo. The results of the analyses carried out on the totality of the data should be made available in the form of a binary file, in order to produce the statistical summaries necessary to illustrate your assertions.</p>]]></content><author><name></name></author><category term="reproducibility"/><summary type="html"><![CDATA[Describe how to handle large or sensible data files when submitting to Computo]]></summary></entry><entry><title type="html">My data analysis takes several hours/days/weeks… How to address the issue of reproducibility?</title><link href="https://computo-journal.org/blog/2023/long-running-code/" rel="alternate" type="text/html" title="My data analysis takes several hours/days/weeks… How to address the issue of reproducibility?"/><published>2023-06-21T00:00:00+00:00</published><updated>2023-06-21T00:00:00+00:00</updated><id>https://computo-journal.org/blog/2023/long-running-code</id><content type="html" xml:base="https://computo-journal.org/blog/2023/long-running-code/"><![CDATA[<p>If your analyses, model tuning or training phase take a prohibitively long time to compile and integrate, you can include the results of the trained methods in the form of a binary file. However, you must provide the code enabling the user to fully reproduce the training phase, and illustrate your code in a small, toy-sized example.</p>]]></content><author><name></name></author><category term="reproducibility"/><summary type="html"><![CDATA[Discuss the reproducibility for long-running code]]></summary></entry><entry><title type="html">I use a different language than Python, R or Julia: would Computo accept my contributions?</title><link href="https://computo-journal.org/blog/2023/others-languages/" rel="alternate" type="text/html" title="I use a different language than Python, R or Julia: would Computo accept my contributions?"/><published>2023-03-24T00:00:00+00:00</published><updated>2023-03-24T00:00:00+00:00</updated><id>https://computo-journal.org/blog/2023/others-languages</id><content type="html" xml:base="https://computo-journal.org/blog/2023/others-languages/"><![CDATA[<p>In principle, we are open to any kind of language.</p> <p>In practice, we need to integrate reproducible and compilable code into our quarto template. Natively, we support, <code class="language-plaintext highlighter-rouge">R</code>, <code class="language-plaintext highlighter-rouge">Python</code> and <code class="language-plaintext highlighter-rouge">Julia</code> and provide dedicated templates. For others, if the language is supported by a Jupyter kernel (<a href="https://gist.github.com/chronitis/682c4e0d9f663e85e3d87e97cd7d1624">there are kernels for many languages</a>, <a href="https://quarto.org/docs/computations/execution-options.html#engine-binding">quarto allows code execution</a>.</p> <p>When writing your contribution though, keep in mind that some languages are not designed for interactivity and that there will be a formatting effort to support your point in your manuscript (which could be as expensive as interfacing this code with Python or R via <code class="language-plaintext highlighter-rouge">pybind11</code>, <code class="language-plaintext highlighter-rouge">Rcpp</code> or equivalent). It’s your choice.</p> <p>From our side, we will do our best for the technical aspects to help with the integration of any language, but the editorial board and reviewers will also do the work to make sure the contribution is within the bounds scientifically and in the spirit of reproducibility.</p>]]></content><author><name></name></author><category term="reproducibility"/><category term="code"/><summary type="html"><![CDATA[Describe how to handle other languages than R, Julia or Python]]></summary></entry><entry><title type="html">How to automatically publish the HTML of my contribution to a website?</title><link href="https://computo-journal.org/blog/2023/HTML-to-website/" rel="alternate" type="text/html" title="How to automatically publish the HTML of my contribution to a website?"/><published>2023-03-17T00:00:00+00:00</published><updated>2023-03-17T00:00:00+00:00</updated><id>https://computo-journal.org/blog/2023/HTML-to-website</id><content type="html" xml:base="https://computo-journal.org/blog/2023/HTML-to-website/"><![CDATA[<p>Some authors reported that their contribution was not published automatically, even when using one of our <a href="/repos">3 template repositories</a> and even when the build action was successful. This is basically due to the fact that the <code class="language-plaintext highlighter-rouge">gh-pages</code> is not preporly setup.</p> <p>We review here the full process for more clarity.</p> <h2 id="1-check-that-the-build-action-is-correctly-configured">1. Check that the build action is correctly configured</h2> <p>If you used one of our template repository, the build action (in <code class="language-plaintext highlighter-rouge">.github/workflows/build.yml</code>) should look like this:</p> <figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="na">name</span><span class="pi">:</span> <span class="s">build</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="s">main</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build-deploy</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">permissions</span><span class="pi">:</span>
      <span class="na">contents</span><span class="pi">:</span> <span class="s">write</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Check out repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>

    <span class="pi">[</span><span class="nv">...</span><span class="pi">]</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Render and Publish</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">quarto-dev/quarto-actions/publish@v2</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">target</span><span class="pi">:</span> <span class="s">gh-pages</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="na">GITHUB_TOKEN</span><span class="pi">:</span> <span class="s">$</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>The last step named <code class="language-plaintext highlighter-rouge">Render and Publish</code> first compiles your notebook and then pushes the HTML and PDF output to a special branch named <code class="language-plaintext highlighter-rouge">gh-pages</code> which is preferably used by Github to define a web page associated with the current repository, with the address https://user.github.io/repo_name : this is where your final rendered paper should go. If the build action is successful, you don’t have to worry and you can move on to the next check.</p> <h2 id="2-check-that-gh-pages-is-activated-on-your-repos">2. Check that gh-pages is activated on your repos</h2> <p>By default, the mechanism that checks if a web page should be published in association with your repository is not activated. You need to go to Settings &gt; page and apply the following configuration:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/gh-pages-config-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/gh-pages-config-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/gh-pages-config-1400.webp"/> <img src="/assets/img/gh-pages-config.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Once this is done, you may need to trigger the build action for the first successful deployment of your web page.</p> <h2 id="3-one-last-thing">3. One last thing</h2> <p>Don’t forget to include the address of the page where your contribution is published to help the reviewer in the <code class="language-plaintext highlighter-rouge">About</code> section of your repository. For example, for the Computo <code class="language-plaintext highlighter-rouge">R</code> template, we get :</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/about-gh-repos-webpage-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/about-gh-repos-webpage-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/about-gh-repos-webpage-1400.webp"/> <img src="/assets/img/about-gh-repos-webpage.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="reproducibility"/><summary type="html"><![CDATA[Describe how to render your article, activate your gh-page and publish your contribution online]]></summary></entry></feed>