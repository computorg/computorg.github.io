---
title: Guidelines for authors
description: |
  Step-by-step guide to help authors format and submit their papers.
format:
  html:
    toc: true
    number-sections: true
    fig-align: "center"
page-layout: article
bibliography: ../publications/published.bib
lightbox: true
---

## A step-by-step guide to submitting a paper to Computo {#sec-guide}

Submissions to [Computo](https://computorg.github.io) require both scientific content (such as equations, code, figures, and data) and clear evidence that this content is reproducible. This is achieved through: i) a notebook system, ii) a virtual environment with frozen dependencies, and iii) continuous integration. If needed, large data files can be stored externally on platforms like [Zenodo](https://zenodo.org/) or [OSF](https://osf.io/).

A Computo submission is therefore a Git(Hub) repository containing:

- the source files for the notebook (a Quarto `.qmd` file, a BibTeX `.bib` file, and any static files such as figures or small `.csv` data tables);
- configuration files to set up dependencies in a virtual environment;
- configuration files to enable continuous integration and render the final documents.

### Template repositories {#sec-templates}

The [Computo](https://github.com/computorg) organization provides template repositories for [R](https://github.com/computorg/template-computo-R), [Python](https://github.com/computorg/template-computo-python), and [Julia](https://github.com/computorg/template-computo-julia) contributors. 

::: {.grid}

::: {.g-col-4}
::: {.callout-note icon="false"}
### R

[![](/assets/img/computo-template-r.png)](https://github.com/computorg/template-computo-R/)

<https://github.com/computorg/template-computo-R/>
:::
:::

::: {.g-col-4}
::: {.callout-tip icon="false"}
### Python

[![](/assets/img/computo-template-python.png)](https://github.com/computorg/template-computo-python/)

<https://github.com/computorg/template-computo-python/>
:::
:::

::: {.g-col-4}
::: {.callout-important icon="false"}
### Julia

[![](/assets/img/computo-template-julia.png)](https://github.com/computorg/template-computo-julia/)

<https://github.com/computorg/template-computo-julia/>
:::
:::
:::

These templates provide a starting point for authors to format their contributions according to Computo's guidelines. They include the necessary files and configurations to set up a reproducible environment and continuous integration

### Setup a git repository {#sec-git}

::: {.callout-note title="Git and GitHub"}
Git is a versioning tool and GitHub is an online platform owned by Microsoft which provides the service of hosting repositories with all the capabilities of versioning offered by Git.

Computo requires authors to submit their contribution as a GitHub repository. Hence, authors are expected to have basic knowledge of Git. We refer authors to the following online book which is particularly well written: <https://happygitwithr.com>.
:::

Create a new GitHub repository by navigating to the [R](https://github.com/computorg/template-computo-R), [Python](https://github.com/computorg/template-computo-python), or [Julia](https://github.com/computorg/template-computo-julia) template repository and clicking the **"Use this template"** button at the top of the page, as shown in @fig-template.

![Screenshot of the R Computo template GitHub page.](/assets/img/computo-template-screenshot.png){#fig-template width="100%"}

::: {.callout-tip title="Branches"}
When you fork a GitHub repository – whether it is a classic repository or a template – GitHub will ask if you want to include all branches (there is a box labeled *Include all branches*). You only need to fork the main branch, so you do not need to check that box.
:::

::: {.callout-caution title="Public/private repository"}
The paper will be automatically published online using GitHub pages. This is possible only with public repositories (which is the default behavior when you initialize your repository from this template). It is  fine to keep your repository private during the writing phase. However, we ask you to set it public at the submission stage; so that the paper can be rendered and published online for the reviewers.
:::

In summary, before clicking on *Create repository*, you should have the options documented in @fig-clone-template.

![Forking a GitHub template.](/assets/img/clone-template.png){#fig-clone-template width="100%"}

::: {.callout-note title="Using Gitlab"}
You can use Gitlab for submitting to Computo. We will be giving more detailed support for this in the future.
:::

### Local setup: clone, quarto, and computo extension {#sec-quarto}

First, clone the repository to your local computer. In a terminal, run:

```bash
# Clone the repository
git clone http://github.com/<user-name>/<repository-name>.git
```

You need to have [Quarto](https://quarto.org/) and the [Computo extension](https://github.com/computorg/computo-quarto-extension) installed.

- Install Quarto: follow instructions at <https://quarto.org/docs/get-started/>.
- Once Quarto is installed, open a terminal in your cloned repo folder and run:


```bash
# Install computo quarto extension
quarto add computorg/computo-quarto-extension
```

::: {.callout-caution title="Multiple collaborators"}
If you are collaborating with others when writing your contributions, **each collaborator** needs to perform these same three steps (clone the repository, install Quarto and install the Computo Quarto extension).
:::

### Write your contribution {#sec-writing}

There are mainly two files you are expected to modify in your repository for writing your contribution: `template-computo-LANG.qmd` (where LANG is to be replaced with either R, Python or Julia) and `_quarto.yml`.

#### Main content of your contribution

The main body of your paper (starting with the *Introduction* section) should be written in the `template-computo-LANG.qmd` following the formatting suggestions therein.

::: {.callout-tip title="Multiple languages"}
Quarto relies on a specific engine to compile your document. By default, that engine detects code blocks, executes them and paste the result below the code block in the rendered document.

It is possible to use multiple languages within the same document (e.g. R and Python or Python and Julia, etc.) provided that you use the **knitr** engine. Indeed, [**knitr**](https://yihui.org/knitr/) is an R package that is able to parse code blocks from many languages. This can be achieved by specifying `engine: knitr` in your document metadata. The default engine binding that Quarto uses is detailed here: <https://quarto.org/docs/computations/execution-options.html#engine-binding>.
:::

::: {.callout-caution title="Local compilation"}
Make sure that you are able to build your manuscript as a standard notebook on your system before proceeding to the next step.
:::

To build your document (both in PDF and HTML by default), you can run the command `quarto render`, e.g. for the template:

```bash
# will render both to html and PDF
quarto render
```

#### Metadata of your contribution

To customise title, authors, date, abstract and so on, you should modify the `_quarto.yml` file. By default, it looks like this:

```yml
project:
  type: default
  render:
    - template-computo-R.qmd
    - README.qmd

title: "Template for contribution to Computo"
subtitle: "Example dedicated to `R` users"
author:
  - name: Jane Doe
    corresponding: true
    email: janedoe@nowhere.moon
    url: https://janedoe.someplace.themoon.org
    orcid: 0000-0000-0000-0000
    affiliations:
      - name: Name of Affiliation one
        department: Statistics
        url: https://someplace.themoon.org
  - name: John Doe
    email: johndoe@nowhere.moon
    url: https://johndoe.someplace.themoon.org
    orcid: 0000-0000-0000-0000
    affiliations:
      - name: Name of Afficiliation two
        department: Computer Science
        url: https://someplace.themoon.org
date: last-modified
date-modified: last-modified
description: |
  This document provides a template based on the [`quarto`](https://quarto.org/) system for contributions to Computo, using the [`quarto journal extension`](https://github.com/computorg/computo-quarto-extension), the knitr kernel (R user) and [`renv`](https://rstudio.github.io/renv/articles/renv.html) to set-up the dependencies.
abstract: >+
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur posuere vestibulum facilisis. Aenean pretium orci augue, quis lobortis libero accumsan eu. Nam mollis lorem sit amet pellentesque ullamcorper. Curabitur lobortis libero eget malesuada vestibulum. Nam nec nibh massa. Pellentesque porttitor cursus tellus. Mauris urna erat, rhoncus sed faucibus sit amet, venenatis eu ipsum.
keywords: [key1, key2, key3]
bibliography: references.bib
github-user: computorg
repo: "template-computo-r"
draft: true # set to false once the build is running
published: false # will be set to true once accepted
license: CC-BY-4.0
format:
  computo-html: default
  computo-pdf: default
```

You can customize most of the entries in that file except `project:`, `published:`, `draft:`, `license:` and `format:`. If your contribution is accepted for publication, the associate editors will modify parts of this file accordingly.

### Setup dependencies {#sec-dependencies}

The next step is to inform Computo of the other packages, tools and environment that your paper might depend upon. It is important to freeze their versions to ensure reproducibility. This step is inherently handled differently whether you are an R, Python or Julia user.

::: {.callout-note icon="false" collapse="true"}
#### R users

{{< include _handle_dependencies_R.qmd >}}
:::

::: {.callout-tip icon="false" collapse="true"}
#### Python users

{{< include _handle_dependencies_python.qmd >}}
:::

::: {.callout-important icon="false" collapse="true"}
#### Julia users

{{< include _handle_dependencies_julia.qmd >}}
:::

### Ensure reproducibility {#sec-reproducibility}

Now that you have written your contribution in the correct template and set up its dependencies, you need to set up continuous integration via GitHub Actions in order to ensure reproducibility of your work and its publication as a webpage.

#### Use Computo's built-in GitHub Action workflow

Computo has a built-in workflow for just that purpose which comes in the form of a YAML file describing a GitHub Action. It should have been automatically added to your repository when you cloned one of our templates. It is located under `.github/workflows/build.yml` and its content should exactly match the following:

```yml
name: Main Workflows

on:
  push:
    branches: ["main","master"]
  repository_dispatch:
    types: [custom-event] 
  workflow_dispatch:
  pull_request:
    branches: ["main","master"]


jobs:
  call_env_workflow:
    uses: computorg/workflows/.github/workflows/global-env.yml@main
  call_quartopublish_workflow:
    permissions:
      id-token: write
      contents: write
      pages: write
    uses: computorg/workflows/.github/workflows/publish-render.yml@main
    needs: call_env_workflow
```

::: {.callout-important title="Content of `build.yml`"}
Authors should **under no circumstances** modify this file. If you encounter a problem (such as the CI not completing successfully), please get in touch with us at <contact@computo-journal.org>.
:::

Next, as illustrated in @fig-deploy, under `Settings > Pages` on the webpage of your repository, select **GitHub Actions** as the source for building and deploying your website.

![Deploy your website with GitHub Actions](/assets/img/2025-03-20-revised-github-process/depoy-github.png){#fig-deploy width="100%"}

Authors can find more details about Computo's workflow in @sec-workflow.

::: {.callout-note title="Compatibility with old reproducibility system"}
You can safely delete the `gh-pages` branch if you have one, as we don't need anymore to push the HTML files to the site.
:::

#### Handle external *system* dependencies

While R, Python, or Julia package dependencies should be managed using the appropriate environment tools, your project may also require external *system* dependencies (such as libraries or command-line tools). These must be installed on the GitHub runner during environment setup or rendering. To handle this, add and customize two scripts at the root of your repository:

- `setup-env-ci.sh` is meant to install system dependencies required to set up the environment in the GitHub runner. Here is an example of such a file taken from a published article:

```bash
# The CI runs on Linux Ubuntu, here goes system dependencies
# needed at environment setup step
sudo apt-get install -y libcurl4-openssl-dev
```

- `setup-render-ci.sh` is meant to install system dependencies required for rendering the paper, like plotting software or running a script to generate data. Here is an example of such a file taken from a published article:

```bash
# The CI runs on Linux Ubuntu, here goes system dependencies
# needed at rendering step
sudo apt-get install -y libblas-dev liblapack-dev
```

::: {.callout-warning title="Ubuntu GitHub runner"}
Remember that the GitHub runner uses Linux Ubuntu and therefore software installation is achieved through `apt-get`. Furthermore, you must precede calls to `apt-get` with the word `sudo` to indicate that you wish to run this command as an administrator.
:::

### Submit your manuscript {#sec-submitting}

Once you have finished writing your contribution, render it locally by running `quarto render` in your project folder. This will generate both HTML and PDF files if everything is set up correctly.

After confirming that the document builds successfully, push your changes to GitHub. The continuous integration workflow will automatically build and publish the HTML and PDF versions online.

::: {.callout-caution}
## Ignored files
Make sure to check and update the `.gitignore` file in your repository. In particular, 
if you changed the name of some files in the repository (like the main `.qmd` file), make propagate this change to the `.gitignore` file in order to avoid pushing binary files to the repository (such as the PDF file). 
:::

To submit your manuscript for review, upload the generated PDF to the [OpenReview](https://openreview.net/group?id=Computo) platform. This will start both the scientific and reproducibility review processes.

For more details about the review process, see the [guidelines for reviewers](/site/guidelines-reviewers.qmd).

### Accepted manuscript {#sec-acceptance}

If your submission is accepted for publication, you will be asked to transfer the ownership of the repository that hosts your paper to the Computo GitHub organization. To do that, you must go on the main page of your repository in a web browser and click on the *Settings* tab as indicated in @fig-transfer-ownership-1.

![Accessing the settings of a GitHub repository.](/assets/img/transfer-ownership.001.png){#fig-transfer-ownership-1 width="100%" fig-align="center"}

Once inside the settings of the repository, scroll all the way down to the bottom of the page until you see **Danger Zone** in red color and click on *Transfer* as indicated in @fig-transfer-ownership-2.

![Accessing the interface for ownership transfer.](/assets/img/transfer-ownership.002.png){#fig-transfer-ownership-2 width="100%" fig-align="center"}

A new page opens where you need to select *Specify an organization or username* and write `computorg` (see @fig-transfer-ownership-3). Then you type what is asked in the blank box and click on *I understand, transfer this repository* and you're all set!

![The ownership transfer page.](/assets/img/transfer-ownership.003.png){#fig-transfer-ownership-3 width="100%" fig-align="center"}

## Example papers {#sec-examples}

In addition to the template repositories that can serve as example papers [see @sec-templates], we provide more in-depth illustrations of the expected content and available features through mock contributions consisting of a complete reworking of the famous t-SNE article.

::: {.grid}

::: {.g-col-6}
::: {.callout-note icon="false"}
### R

[![](/assets/img/published-paper-tsne.png)](https://computo-journal.org/published-paper-tsne/)

<https://computo-journal.org/published-paper-tsne/>
:::
:::

::: {.g-col-6}
::: {.callout-tip icon="false"}
### Python

[![](/assets/img/published-paper-tsne.png)](https://computo-journal.org/published-paper-tsne-R/)

<https://computo-journal.org/published-paper-tsne-R/>
:::
:::

:::

:::{.callout-tip}
## Accessing paper source

For other advanced examples, do not hesitate to explore the source code of any [paper already published in Computo](https://computo-journal.org/site/publications.html) to see how the template is used in practice. You can also access the source code of the example papers mentioned above by clicking on the `</> Source` button in the upper-right corner of the page as illustrated in @fig-template-source.
:::

![Accessing sources of the rendered example papers.](/assets/img/computo-template-r-source.png){#fig-template-source width="100%"}

The source code of the page then displays as shown in @fig-template-source-display and the user can click on the icon in the upper-right corner to copy the source code for practicing locally.

![Copying the sources of the rendered example papers.](/assets/img/computo-template-r-source-display.png){#fig-template-source-display width="100%"}

## Computo's publication workflow {#sec-workflow}

The Computo workflows provide a streamlined publishing pipeline for authors to submit and render Quarto articles directly on GitHub Pages without requiring technical expertise.

### Workflow Summary

![Computo Workflow Structure](/assets/img/2025-03-20-revised-github-process/workflow.svg){#fig-workflow width="100%"}

As illustrated in @fig-workflow, the publication process consists of two main phases:

1.  **Environment Setup and Caching** (`global-env.yml`)
    -   Detects and installs required dependencies (Python, R)
    -   Caches the environment for faster subsequent runs
    -   Customizable via `setup-env-ci.sh`
2.  **Rendering and Deployment** (`publish-render.yml`)
    -   Renders Quarto documents to HTML
    -   Publish the output to GitHub Pages
    -   Customizable via `setup-render-ci.sh`

Authors only need to reference the main workflow file (`build.yml`) in their repository, which orchestrates these processes.

### Key Benefits

-   **Simplified Process**: Authors need minimal GitHub Actions knowledge
-   **Optimized Performance**: Environment caching for faster builds
-   **Customization Points**: Two script entry points for custom configurations
-   **Automated Deployment**: Direct publishing to GitHub Pages

Authors simply use the `build.yml` workflow in their repository to trigger the complete process from environment setup to final publication.

### Reproducing an existing paper published in Computo

Our publication workflow makes it very easy for anyone to reproduce a given paper. Consider for instance the paper <https://doi.org/10.57750/sfxn-1t05> associated with the Github repository [published-202412-giorgi-efficient][https://github.com/computorg/published-202412-giorgi-efficient]. You first need to clone the repository. Then you need to install Quarto and the Computo Quarto extension in the `published-202412-giorgi-efficient` folder that the cloning step made. Finally, you can render the document. In summary, you do that with the following commands:

```bash
git clone https://github.com/computorg/published-202412-giorgi-efficient.git
cd published-202412-giorgi-efficient
quarto add computorg/computo-quarto-extension
quarto render
```

## Computo's code of ethics {#sec-ethics}

Originality

: - Authors guarantee that their proposed article is original, and that it infringes no moral intellectual property right of any other person or entity.
- Authors guarantee that their proposed article has not been published previously, and that they have not submitted the proposed article simultaneously to any other journal.

Conflicts of interest

: - Authors shall disclose any potential conflict of interest, whether it is professional, financial or other, to the journal’s Editor, if this conflict could be interpreted as having influenced their work.
- Authors shall declare all sources of funding for the research presented in the article.

Impartiality

: All articles are examined impartially, and their merits are assessed regardless of the sex, religion, sexual orientation, nationality, ethnic origin, length of service or institutional affiliation of the author(s).

Funding

: All funding received by the author(s) shall be clearly stated in the article(s).

Defamatory statements

: Authors guarantee that their proposed article contains no matter of a defamatory, hateful, fraudulent or knowingly inexact character.

References

: Authors guarantee that all the publications used in their work have been cited appropriately.

Copyright/author's right/license compliance

: Authors guarantee that they comply with the usage license of any third party contents/works (code, software, data, figures/images, documents, etc.) that were used to produce their work.

